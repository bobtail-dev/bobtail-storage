// Generated by CoffeeScript 1.9.2
(function() {
  var $, TEST_ARRAY, TEST_OBJECT, _, rxStorage, storages, testPrefix;

  $ = window.$, _ = window._, rxStorage = window.rxStorage;

  testPrefix = "reactive__storage__test__";

  storages = ["local", "session"];

  TEST_OBJECT = {
    name: "name",
    array: [1, 2, 3],
    object: {
      a: 'a',
      b: 'b'
    }
  };

  TEST_ARRAY = [
    1, 2, [
      3, 4, {
        name: 'name'
      }
    ]
  ];

  storages.forEach(function(storage) {
    var curRxStorage, testKey, windowStorage;
    testKey = function(k) {
      return "" + testPrefix + storage + "__" + k;
    };
    curRxStorage = rxStorage[storage];
    windowStorage = window[storage + "Storage"];
    windowStorage.clear();
    QUnit.test(storage + ".addString", function(assert) {
      var k;
      k = testKey("addString");
      curRxStorage.setItem(k, "value");
      assert.equal(curRxStorage.getItem(k), "value");
      return assert.equal(windowStorage[k], "value");
    });
    QUnit.test(storage + ".addJSON", function(assert) {
      var k;
      k = testKey("addJSON");
      curRxStorage.setItem(k, TEST_OBJECT);
      assert.propEqual(curRxStorage.getItem(k), TEST_OBJECT);
      return assert.equal(windowStorage.getItem(rxStorage.__jsonPrefix(k)), JSON.stringify(TEST_OBJECT));
    });
    QUnit.test(storage + ".clear", function(assert) {
      var k1, k2;
      k1 = testKey("clearString");
      k2 = testKey("clearJSON");
      curRxStorage.setItem(k1, "str");
      curRxStorage.setItem(k2, TEST_OBJECT);
      curRxStorage.clear();
      assert.strictEqual(curRxStorage.getItem(k1), void 0);
      assert.strictEqual(curRxStorage.getItem(k2), void 0);
      return assert.propEqual(windowStorage, {});
    });
    QUnit.test(storage + ".removeString", function(assert) {
      var k;
      k = testKey("clearString");
      curRxStorage.setItem(k, "str");
      curRxStorage.removeItem(k);
      assert.strictEqual(curRxStorage.getItem(k), void 0);
      return assert.propEqual(windowStorage, {});
    });
    QUnit.test(storage + ".removeJSON", function(assert) {
      var k;
      k = testKey("clearString");
      curRxStorage.setItem(k, TEST_OBJECT);
      curRxStorage.removeItem(k);
      assert.strictEqual(curRxStorage.getItem(k), void 0);
      return assert.propEqual(windowStorage, {});
    });
    QUnit.test(storage + ".getMissingKey", function(assert) {
      return assert.strictEqual(curRxStorage.getItem("badkey"), void 0);
    });
    QUnit.test(storage + ".bind", function(assert) {
      var depCell, k, snapAssert;
      k = testKey("bind");
      depCell = curRxStorage.getItemBind(k);
      snapAssert = function(func, val) {
        return assert[func](rx.snap(function() {
          return depCell.get();
        }), val);
      };
      assert.strictEqual(rx.snap(function() {
        return depCell.get();
      }), void 0);
      curRxStorage.setItem(k, "bindstring");
      snapAssert("equal", "bindstring");
      curRxStorage.setItem(k, TEST_OBJECT);
      snapAssert("deepEqual", TEST_OBJECT);
      curRxStorage.setItem(k, TEST_ARRAY);
      snapAssert("deepEqual", TEST_ARRAY);
      curRxStorage.setItem(k, "a new bind");
      snapAssert("equal", "a new bind");
      curRxStorage.removeItem(k);
      snapAssert("strictEqual", void 0);
      curRxStorage.setItem(k, "a new bind");
      return snapAssert("equal", "a new bind");
    });
    return QUnit.test(storage + ".collisions", function(assert) {
      var jsonK, k;
      k = testKey("collisions");
      jsonK = rxStorage.__jsonPrefix(k);
      curRxStorage.setItem(k, "bindstring");
      assert.strictEqual(windowStorage[jsonK], void 0);
      assert.equal(windowStorage[k], "bindstring");
      assert.equal(curRxStorage.getItem(k), "bindstring");
      curRxStorage.setItem(k, TEST_OBJECT);
      assert.strictEqual(windowStorage[k], void 0);
      assert.equal(windowStorage[jsonK], JSON.stringify(TEST_OBJECT));
      assert.deepEqual(curRxStorage.getItem(k), TEST_OBJECT);
      curRxStorage.setItem(k, TEST_ARRAY);
      assert.strictEqual(windowStorage[k], void 0);
      assert.equal(windowStorage[jsonK], JSON.stringify(TEST_ARRAY));
      assert.deepEqual(curRxStorage.getItem(k), TEST_ARRAY);
      curRxStorage.setItem(k, "a new bind");
      assert.strictEqual(windowStorage[jsonK], void 0);
      assert.equal(windowStorage[k], "a new bind");
      return assert.equal(curRxStorage.getItem(k), "a new bind");
    });
  });

}).call(this);

//# sourceMappingURL=tests.js.map
